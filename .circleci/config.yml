version: 2  # use CircleCI 2.0 instead of CircleCI Classic
jobs:  # basic units of work in a run
  build_app_and_lint:
    parallelism: 1
    docker:  # run the steps with Docker
      - image: circleci/elixir:1.10.3  # ...with this image as the primary container; this is where all `steps` will run

    working_directory: ~/app  # directory where steps will run

    steps:  # commands that comprise the `build` job
      - checkout  # check out source code to working directory
      - run:
          name: Get dependencies
          command: |
            mix local.hex --force
            mix local.rebar --force
      - restore_cache:  # restores saved mix cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: # compile credo and its dependencies so that Mix does not try to compile the entire world in order to find the `credo` task.
          name: Get dependencies and check lint
          command: |
            echo "--- Install Dependencies"
            mix deps.get

            echo "--- Mix format"
            mix format --check-formatted
            FORMAT_RESULT=$?

            echo "--- Credo"
            mix deps.compile bunt credo
            mix credo
            CREDO_RESULT=$?

            if [ $FORMAT_RESULT -ne 0 ] || [ $CREDO_RESULT -ne 0 ]; then
              echo "^^^ +++"
              exit 1
            fi
      - save_cache:  # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"

  build_app_and_test:  # runs not using Workflows must have a `build` job as entry point
    parallelism: 1  # run only one instance of this job
    docker:  # run the steps with Docker
      - image: circleci/elixir:1.10.3  # ...with this image as the primary container; this is where all `steps` will run
        environment:  # environment variables for primary container
          MIX_ENV: test

    working_directory: ~/app  # directory where steps will run

    steps:  # commands that comprise the `build` job
      - checkout  # check out source code to working directory
      - run:
          name: Get dependencies
          command: |
            mix local.hex --force
            mix local.rebar --force

      - restore_cache:  # restores saved mix cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:  # list of cache keys, in decreasing specificity
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:  # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run:
          name: Run tests
          command: |
            mix deps.get --only test
            mix test
      - save_cache:  # generate and store mix cache
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache: # don't forget to save a *build* cache, too
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"

      - run: mix coveralls.circle  # run all tests in project

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_app_and_test
      - build_app_and_lint
